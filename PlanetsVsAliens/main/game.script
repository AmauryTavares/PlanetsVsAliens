local rendercam = require('rendercam.rendercam')
local monarch = require('monarch.monarch')

local oyster = require('oyster.oyster')
local gamestate = require('oyster.gamestate')
local playerdata = require('oyster.playerdata')

local playerdataFilePath = sys.get_save_file('PlanetsVsAliens', 'playerdata')

local spawnAlien = nil
local reduceTime = nil
local createPortals = nil
local alertRoute = nil
local alertAllEnemyRouteAttack = nil
local alertAllEnemyRouteStop = nil
local loadData = nil
local spawnPlanet = nil

function init(self)
	self.board = {}

	self.numRoutes = 5
	self.currentTime = 120 -- segundos
	self.maxTime = 120 -- segundos
	self.phase = 1
	self.currentSpawnTime = 3 -- segundos
	self.maxSpawnTime = 3 -- segundos

	self.currentStars = 0
	self.currentFragments = 30000
	self.currentLife = 100
	
	self.countEnemyRoutes = { 0, 0, 0, 0, 0 }
	self.routes = {}
	self.portals = {}

	loadData(self)
end

function final(self) 
	if not sys.save(playerdataFilePath, playerdata.getAll(1)) then
		print('Erro ao salvar dados.')
	end
end

function update(self, dt)
	if gamestate.is('PLAY') then
		reduce_time(self, dt)
		alertRoute(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('spawn_planet') then
		local levels = playerdata.getAll(1).planets
		local planets = oyster.get('planetsdata').planets
		local planetsSelected = oyster.get('planets_selected')
		
		local pos = rendercam.screen_to_world_2d(message.posWorld.x, message.posWorld.y)
		local idPlanet = planetsSelected[message.planetIndex]
		local idLevel = levels[idPlanet]
		
		-- deleta planeta
		if message.planetIndex == 5 then
			if self.board[message.boardPosX .. message.boardPosY] then
				msg.post(self.board[message.boardPosX .. message.boardPosY], 'destroy')
				self.board[message.boardPosX .. message.boardPosY] = nil
			end
		elseif not self.board[message.boardPosX .. message.boardPosY] and self.currentFragments >= planets[idPlanet].status[idLevel].fragment then
			-- invoca planeta
			spawnPlanet(self, idPlanet, message.boardPosX, message.boardPosY, pos)
			self.currentFragments = self.currentFragments - planets[idPlanet].status[idLevel].fragment
			msg.post('game:/go#game', 'update_fragments', { fragments = self.currentFragments })
		end	

	elseif message_id == hash('enemy_kill') then
		self.countEnemyRoutes[message.route] = self.countEnemyRoutes[message.route] - 1
	elseif message_id == hash('update_routes') then
		self.routes = message.routes

	elseif message_id == hash('update_portals') then
		self.portals = message.portals
		createPortals(self)
		
	elseif message_id == hash('start') then
		self.start = true
	end
end

spawnPlanet = function (self, idPlanet, boardPosX, boardPosY, pos)
	if idPlanet == 1 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.7)
	elseif idPlanet == 2 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.4)
	elseif idPlanet == 3 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.4)
	elseif idPlanet == 4 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.6)
	elseif idPlanet == 5 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.16)
	elseif idPlanet == 6 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.2)
	elseif idPlanet == 7 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.3)
	elseif idPlanet == 8 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.3)
	elseif idPlanet == 9 then
		self.board[boardPosX .. boardPosY] = factory.create('game#factory_planet' .. idPlanet, pos, nil, nil, 0.8)
	end
end

loadData = function (self)
	local file = sys.load(playerdataFilePath)

	if not next(file) then
		file = require('main.data.playerdata')
	end

	playerdata.setAll(1, file)	
	
	oyster.set('planetsdata', require('main.data.planetsdata'))
	oyster.set('aliensdata', require('main.data.aliensdata'))
end

-- alerta todos os inimigos para comeca a atacar
alertAllEnemyRouteAttack = function (self, route)
	for i = 1, 6 do
		msg.post(self.board[route .. i], 'start_attack')
	end
end

-- alerta todos os inimigos para parar de atacar
alertAllEnemyRouteStop = function (self, route)
	for i = 1, 6 do
		msg.post(self.board[route .. i], 'stop_attack')
	end
end

-- alerta todas as rotas da existencia de alienigenas
alertRoute = function (self)
	for i = 1, self.numRoutes do
		if self.countEnemyRoutes[i] > 0 then
			alertAllEnemyRouteAttack(self, i)
		else
			alertAllEnemyRouteStop(self, i)
		end
	end
end

createPortals = function (self) 
	for i = 1, 5 do
		local portal = self.portals[i]
		local posWorld = rendercam.screen_to_world_2d(portal.x, portal.y)
		factory.create('main:/game#factory_portals', posWorld, nil, nil, 0.2)
	end
end

spawn_alien = function (self)
	local randomRoute = math.random(1, self.numRoutes)
	local route = self.routes[randomRoute]
	local posWorld = rendercam.screen_to_world_2d(route.x, route.y)
	self.countEnemyRoutes[randomRoute] = self.countEnemyRoutes[randomRoute] + 1
	factory.create('main:/game#factory_alien1', posWorld, nil, { route = randomRoute }, 0.6)
end

reduce_time = function (self, dt) 
	-- decrementa tempo da fase
	if self.currentTime > 0 then
		self.currentTime = self.currentTime - dt

		if self.currentTime <= 0 then
			self.phase = self.phase + 1
			self.currentTime = self.maxTime
		end
	end

	-- decrementa tempo do spawn de alien
	if self.currentSpawnTime > 0 then
		self.currentSpawnTime = self.currentSpawnTime - dt

		if self.currentSpawnTime <= 0 then
			spawn_alien(self)
			self.currentSpawnTime = self.maxSpawnTime
		end
	end 
end