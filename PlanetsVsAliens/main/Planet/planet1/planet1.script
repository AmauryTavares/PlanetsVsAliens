go.property('cooldownAttack', 3) -- segundos
go.property('level', 1)
go.property('attack', 10)
go.property('life', 100)

go.property('boardPosX', 0)
go.property('boardPosY', 0)

local gamestate = require('oyster.gamestate')

local attack = nil
local reduceTime = nil

function init(self)
	self.start_attack = false
	self.currentCooldownAttack = self.cooldownAttack
	
	local pos = go.get_position()

	label.set_text('#lb_level', 'Nivel ' .. self.level)
	go.animate(go.get_id(), 'position.y', go.PLAYBACK_LOOP_PINGPONG, pos.y - 10, go.EASING_INOUTSINE, 3)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)	
	reduceTime(self, dt)

	if not gamestate.is('PLAY') then
		go.delete()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('start_attack') then
		self.start_attack = true
	elseif message_id == hash('stop_attack') then
		self.start_attack = stop
		self.currentCooldownAttack = self.cooldownAttack
	elseif message_id == hash('subtract_life') then
		self.life = self.life - message.subtractLife

		if self.life <= 0 then
			msg.post('main:/main#game', 'remove_planet_board', { boardPosX = self.boardPosX, boardPosY = self.boardPosY })
		end
	elseif message_id == hash('destroy') then
		go.delete()
	end
end

reduceTime = function (self, dt)
	if self.start_attack then
		self.currentCooldownAttack = self.currentCooldownAttack - dt

		if self.currentCooldownAttack <= 0 then
			attack(self)
			self.currentCooldownAttack = self.cooldownAttack
		end
	end
end

attack = function (self)
	local pos = go.get_position()
	factory.create('#factory_attack', pos, nil, { speed = 180, time = 3, damage = self.attack }, 0.3)
end