go.property('route', 0)
go.property('attack', 10)
go.property('life', 100)
go.property('speed', 50)
go.property('cooldownAttack', 6)
go.property('starsDrop', 100)
go.property('fragmentsDrop', 50)
go.property('damageLife', 1)

local gamestate = require('oyster.gamestate')

local reduceTime = nil
local updatePos = nil

function init(self)
	self.attacking = false
	self.currentCooldownTarget = 1.5
	self.cooldownTarget = 1.5
	self.currentCooldownAttack = self.cooldownAttack

	local pos = go.get_position()

	go.animate(go.get_id(), 'position.y', go.PLAYBACK_LOOP_PINGPONG, pos.y - 10, go.EASING_INOUTSINE, 3)
end

function final(self)
	msg.post('main:/main#game', 'enemy_kill', { route = self.route })
end

function update(self, dt)
	updatePos(self, dt)
	reduceTime(self, dt)

	if not gamestate.is('PLAY') then
		go.delete()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('collision_response') then
		if message.other_group == hash('portal') then
			msg.post('main:/main#game', 'subtract_life', { subtractLife = self.damageLife })
			go.delete()
		elseif message.other_group == hash('planet') then
			self.attacking = true
			self.currentCooldownTarget = self.cooldownTarget
		end
	elseif message_id == hash('subtract_life') then
		self.life = self.life - message.subtractLife
		if self.life <= 0 then
			msg.post('main:/main#game', 'add_stars', { addStars = self.starsDrop })
			msg.post('main:/main#game', 'add_fragments', { addFragments = self.fragmentsDrop })
			go.delete()
		end
	end	
end

updatePos = function(self, dt) 
	if not self.attacking then
		local pos = go.get_position()
		pos.x = pos.x - self.speed * dt
		go.set_position(pos)
	end
end

reduceTime = function(self, dt)
	if self.attacking and self.currentCooldownAttack > 0 then
		self.currentCooldownAttack = self.currentCooldownAttack - dt

		if self.currentCooldownAttack <= 0 then
			local pos = go.get_position()
			pos.x = pos.x - 80

			factory.create('#factory_attack', pos, nil, { speed = 0, time = 0.5, damage = self.attack }, 0.9)
			self.currentCooldownAttack = self.cooldownAttack
		end
	end

	if self.attacking and self.currentCooldownTarget > 0 then
		self.currentCooldownTarget = self.currentCooldownTarget - dt

		if self.currentCooldownTarget <= 0 then
			self.attacking = false
			self.currentCooldownTarget = self.cooldownTarget
			self.currentCooldownAttack = self.cooldownAttack
		end
	end
end